#!/usr/bin/env python3
"""
Script f√∂r att generera interpolerade bilder f√∂r marina parametrar.
Baserat p√• generate_current_magnitude_images.py men st√∂der str√∂mstyrka, vattentemperatur och salthalt.
Liknar FCOO Marine Forecast-systemet med f√§rgade zoner f√∂r varje parameter.
"""

import json
import gzip
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.colors as colors
from scipy.interpolate import griddata
from datetime import datetime
import os
from pathlib import Path
import geojson
from shapely.geometry import shape, Point
import argparse
from matplotlib.colors import LinearSegmentedColormap

# F√ÑRGSKALOR F√ñR OLIKA PARAMETRAR

# Str√∂mstyrka (0-1.3+ m/s, motsvarar 0-2.5+ knop)
CURRENT_COLORMAP = [
    (0.0, '#000080'),    # M√∂rk bl√• f√∂r 0.0 m/s
    (0.1, '#0080FF'),    # Ljusare bl√• f√∂r 0.1 m/s
    (0.2, '#00FF80'),    # Gr√∂n f√∂r 0.2 m/s  
    (0.4, '#80FF00'),    # Gul-gr√∂n f√∂r 0.4 m/s
    (0.6, '#FFFF00'),    # Gul f√∂r 0.6 m/s
    (0.8, '#FF8000'),    # Orange f√∂r 0.8 m/s
    (1.0, '#FF4000'),    # R√∂d-orange f√∂r 1.0 m/s
    (1.1, '#FF0000'),    # R√∂d f√∂r 1.1 m/s
    (1.2, '#800000'),    # M√∂rk r√∂d f√∂r 1.2 m/s
    (1.3, '#400000'),    # Mycket m√∂rk r√∂d f√∂r 1.3+ m/s
]

# Vattentemperatur - Enklare f√§rgschema: m√∂rkbl√• ‚Üí ljusbl√• ‚Üí gr√∂n ‚Üí gul ‚Üí orange ‚Üí r√∂d
TEMPERATURE_COLORMAP = [
    (-1.0, '#000080'),   # M√∂rkbl√•
    (2.0,  '#0066FF'),   # Ljusbl√•  
    (8.0,  '#00AA00'),   # Gr√∂n
    (12.0, '#FFFF00'),   # Gul
    (16.0, '#FF8800'),   # Orange
    (24.0, '#FF0000'),   # R√∂d
]

# Salthalt - Enklare f√§rgschema: m√∂rkgr√∂n ‚Üí ljusgr√∂n ‚Üí gul ‚Üí ljusbl√• ‚Üí m√∂rkbl√•
SALINITY_COLORMAP = [
    (0.0,  '#004400'),   # M√∂rkgr√∂n
    (8.0,  '#00BB00'),   # Ljusgr√∂n
    (16.0, '#FFFF00'),   # Gul (mittenv√§rdet)
    (24.0, '#66CCFF'),   # Ljusbl√•
    (36.0, '#000066'),   # M√∂rkbl√•
]

def get_parameter_config(parameter):
    """H√§mta konfiguration f√∂r en specifik parameter"""
    if parameter == 'current':
        return {
            'colormap': CURRENT_COLORMAP,
            'unit': 'm/s',
            'name': 'str√∂mstyrka',
            'name_en': 'current_magnitude',
            'output_dir': 'current-magnitude-images'
        }
    elif parameter == 'temperature':
        return {
            'colormap': TEMPERATURE_COLORMAP,
            'unit': '¬∞C',
            'name': 'vattentemperatur',
            'name_en': 'temperature',
            'output_dir': 'temperature-images'
        }
    elif parameter == 'salinity':
        return {
            'colormap': SALINITY_COLORMAP,
            'unit': 'g/kg',
            'name': 'salthalt',
            'name_en': 'salinity',
            'output_dir': 'salinity-images'
        }
    else:
        raise ValueError(f"Ok√§nd parameter: {parameter}")

def create_colormap(parameter):
    """Skapa en colormap som matchar FCOO:s f√§rgschema f√∂r specifik parameter"""
    config = get_parameter_config(parameter)
    colormap_data = config['colormap']
    
    values = [item[0] for item in colormap_data]
    colors_list = [item[1] for item in colormap_data]
    
    # Normalisera v√§rden till 0-1 f√∂r matplotlib
    norm_values = [(v - min(values)) / (max(values) - min(values)) for v in values]
    
    # Skapa colormap
    cmap = colors.LinearSegmentedColormap.from_list(
        f'{parameter}_colormap', 
        list(zip(norm_values, colors_list))
    )
    return cmap, min(values), max(values)

def load_water_mask(geojson_path):
    """Ladda vattenmask fr√•n GeoJSON f√∂r att begr√§nsa interpolation"""
    print(f"üåä Laddar vattenmask fr√•n {geojson_path}")
    
    with open(geojson_path, 'r', encoding='utf-8') as f:
        water_geojson = geojson.load(f)
    
    # Skapa Shapely-geometrier fr√•n alla polygoner
    water_polygons = []
    for feature in water_geojson['features']:
        if feature['geometry']['type'] in ['Polygon', 'MultiPolygon']:
            water_polygons.append(shape(feature['geometry']))
    
    print(f"‚úÖ Laddade {len(water_polygons)} vattenpolygoner")
    return water_polygons

def point_in_water(lon, lat, water_polygons):
    """Kontrollera om en punkt √§r i vatten"""
    point = Point(lon, lat)
    return any(polygon.contains(point) for polygon in water_polygons)

def load_area_parameters(file_path):
    """Ladda och dekomprimera area-parameters data"""
    print(f"üì¶ Laddar area-parameters fr√•n {file_path}")
    
    with gzip.open(file_path, 'rt', encoding='utf-8') as f:
        data = json.load(f)
    
    print(f"‚úÖ Laddade {len(data['points'])} punkter med {len(data['metadata']['timestamps'])} tidssteg")
    return data

def extract_parameter_data_for_timestamp(area_data, timestamp_prefix, water_point_cache, parameter):
    """Extrahera parameterdata f√∂r en specifik tidsst√§mpel"""
    lons, lats, values = [], [], []
    
    for point in area_data['points']:
        lat, lon = point['lat'], point['lon']
        
        # Anv√§nd cache f√∂r att snabbt kolla om punkten √§r i vatten
        point_key = f"{lat:.4f},{lon:.4f}"
        if point_key not in water_point_cache:
            continue
            
        # Hitta data f√∂r r√§tt tidsst√§mpel
        for data_entry in point['data']:
            if data_entry['time'].startswith(timestamp_prefix):
                value = None
                
                if parameter == 'current':
                    if 'current' in data_entry and data_entry['current']:
                        u = data_entry['current'].get('u')
                        v = data_entry['current'].get('v')
                        if u is not None and v is not None:
                            # Ber√§kna str√∂mstyrka (magnitude) i m/s
                            value = np.sqrt(u**2 + v**2)
                
                elif parameter == 'temperature':
                    if 'temperature' in data_entry:
                        value = data_entry['temperature']
                
                elif parameter == 'salinity':
                    if 'salinity' in data_entry:
                        value = data_entry['salinity']
                
                if value is not None:
                    lons.append(lon)
                    lats.append(lat)
                    values.append(value)
                break
    
    return np.array(lons), np.array(lats), np.array(values)

def create_interpolated_image(lons, lats, values, water_mask_grid, output_path, timestamp, bbox, parameter):
    """Skapa interpolerad PNG-bild av specifik parameter"""
    
    config = get_parameter_config(parameter)
    param_name = config['name']
    unit = config['unit']
    
    if len(lons) == 0:
        print(f"‚ö†Ô∏è Ingen {param_name}-data f√∂r {timestamp}")
        return False
    
    # Anv√§nd samma uppl√∂sning som f√∂rcachad mask
    lon_min, lon_max, lat_min, lat_max = bbox
    grid_resolution = water_mask_grid.shape[0]  # Matcha cachad mask-storlek
    
    # Anv√§nd NORMAL grid (ingen margin - edge enhancement r√§cker!)
    lon_grid = np.linspace(lon_min, lon_max, grid_resolution)
    lat_grid = np.linspace(lat_min, lat_max, grid_resolution)
    lon_mesh, lat_mesh = np.meshgrid(lon_grid, lat_grid)
    
    # EDGE ENHANCEMENT: L√§gg till extrapolerade punkter vid bbox-kanter
    print(f"üîß Skapar edge-points f√∂r full bbox-t√§ckning...")
    
    # Skapa edge points l√§ngs bbox-kanterna
    edge_lons = []
    edge_lats = []
    edge_values = []
    
    # Antal edge points per kant (mer f√∂r b√§ttre t√§ckning)
    n_edge_points = 25
    
    # V√§nster kant (lon_min)
    for lat in np.linspace(lat_min, lat_max, n_edge_points):
        # Hitta n√§rmaste punkt f√∂r extrapolation
        distances = np.sqrt((lons - lon_min)**2 + (lats - lat)**2)
        nearest_idx = np.argmin(distances)
        edge_lons.append(lon_min)
        edge_lats.append(lat)
        edge_values.append(values[nearest_idx])
    
    # H√∂ger kant (lon_max)
    for lat in np.linspace(lat_min, lat_max, n_edge_points):
        distances = np.sqrt((lons - lon_max)**2 + (lats - lat)**2)
        nearest_idx = np.argmin(distances)
        edge_lons.append(lon_max)
        edge_lats.append(lat)
        edge_values.append(values[nearest_idx])
    
    # Botten kant (lat_min)
    for lon in np.linspace(lon_min, lon_max, n_edge_points):
        distances = np.sqrt((lons - lon)**2 + (lats - lat_min)**2)
        nearest_idx = np.argmin(distances)
        edge_lons.append(lon)
        edge_lats.append(lat_min)
        edge_values.append(values[nearest_idx])
    
    # Topp kant (lat_max)
    for lon in np.linspace(lon_min, lon_max, n_edge_points):
        distances = np.sqrt((lons - lon)**2 + (lats - lat_max)**2)
        nearest_idx = np.argmin(distances)
        edge_lons.append(lon)
        edge_lats.append(lat_max)
        edge_values.append(values[nearest_idx])
    
    # Kombinera original data med edge points
    enhanced_lons = np.concatenate([lons, edge_lons])
    enhanced_lats = np.concatenate([lats, edge_lats])
    enhanced_values = np.concatenate([values, edge_values])
    
    print(f"üîÑ Interpolerar {len(enhanced_values)} punkter (inkl. {len(edge_values)} edge-points) till {grid_resolution}x{grid_resolution} grid...")
    
    # Interpolera med scipy.griddata (cubic f√∂r b√§sta kvalitet nu n√§r vi inte har gigantisk grid)
    try:
        grid_values = griddata(
            (enhanced_lons, enhanced_lats), 
            enhanced_values, 
            (lon_mesh, lat_mesh), 
            method='cubic',  # B√§sta kvalitet
            fill_value=np.nan
        )
        
        # F√∂r att n√• l√§ngre ut till kanterna, fyll NaN-omr√•den med nearest neighbor
        nan_mask = np.isnan(grid_values)
        if np.any(nan_mask):
            grid_values_nearest = griddata(
                (enhanced_lons, enhanced_lats), 
                enhanced_values, 
                (lon_mesh, lat_mesh), 
                method='nearest',
                fill_value=np.nan
            )
            # Fyll bara NaN-omr√•den med nearest neighbor
            grid_values[nan_mask] = grid_values_nearest[nan_mask]
        
        # PADDING STEP: Fyll eventuella NaN-omr√•den vid kanterna med extrapolation
        if np.any(np.isnan(grid_values)):
            print("üîß Applicerar kant-padding f√∂r att fylla gap till bbox-kanter...")
            
            # Hitta alla NaN-positioner
            nan_mask = np.isnan(grid_values)
            
            # Anv√§nd nearest neighbor f√∂r att extrapolera till kanter
            from scipy.ndimage import binary_dilation
            
            # Iterativt fyll NaN-v√§rden med grannv√§rden
            iterations = 0
            max_iterations = 20  # S√§kerhetsgr√§ns
            
            while np.any(nan_mask) and iterations < max_iterations:
                # Skapa en dilated mask f√∂r att hitta gr√§nsen
                dilated = binary_dilation(~nan_mask)
                
                # Fyll NaN-v√§rden vid gr√§nsen med genomsnitt av grannar
                for i in range(grid_values.shape[0]):
                    for j in range(grid_values.shape[1]):
                        if nan_mask[i, j] and dilated[i, j]:
                            # Samla v√§rden fr√•n grannar som inte √§r NaN
                            neighbors = []
                            for di in [-1, 0, 1]:
                                for dj in [-1, 0, 1]:
                                    ni, nj = i + di, j + dj
                                    if (0 <= ni < grid_values.shape[0] and 
                                        0 <= nj < grid_values.shape[1] and 
                                        not np.isnan(grid_values[ni, nj])):
                                        neighbors.append(grid_values[ni, nj])
                            
                            if neighbors:
                                grid_values[i, j] = np.mean(neighbors)
                                nan_mask[i, j] = False
                
                iterations += 1
            
            remaining_nan = np.sum(nan_mask)
            print(f"   ‚úÖ Padding klar efter {iterations} iterationer. {remaining_nan} NaN kvar.")
            
            # Om det fortfarande finns NaN, anv√§nd global nearest neighbor som backup
            if remaining_nan > 0:
                print("   üîÑ Final backup med nearest neighbor...")
                grid_values_backup = griddata(
                    (lons, lats), 
                    values, 
                    (lon_mesh, lat_mesh), 
                    method='nearest'
                )
                grid_values[nan_mask] = grid_values_backup[nan_mask]
        
        # Kolla slutresultat
        nan_count = np.sum(np.isnan(grid_values))
        total_count = grid_values.size
        nan_percentage = (nan_count / total_count) * 100
        print(f"   üìä Interpolation slutresultat: {nan_percentage:.1f}% NaN-v√§rden")
    
    except Exception as e:
        print(f"‚ùå Interpolation misslyckades f√∂r {param_name} {timestamp}: {e}")
        return False
    
    # Fixa negativa v√§rden fr√•n cubic interpolation f√∂r vissa parametrar
    if parameter in ['current', 'salinity'] and np.any(grid_values < 0):
        negative_count = np.sum(grid_values < 0)
        print(f"   üîß Fixar {negative_count} negativa v√§rden fr√•n cubic interpolation...")
        grid_values = np.maximum(grid_values, 0)  # Kl√§mma till >= 0
    
    # Anv√§nd f√∂rcachad vattenmask (mycket snabbare)
    print("üåä Applicerar f√∂rcachad vattenmask...")
    
    # Applicera vattenmask (s√§tt land-omr√•den till NaN f√∂r transparens)
    grid_values[~water_mask_grid] = np.nan
    
    # DEBUG: Analysera v√§rdena som plottas
    valid_values = grid_values[~np.isnan(grid_values)]
    if len(valid_values) > 0:
        print(f"   üìä {param_name.title()}-statistik:")
        print(f"      Min: {np.min(valid_values):.3f} {unit}")
        print(f"      Max: {np.max(valid_values):.3f} {unit}") 
        print(f"      Medel: {np.mean(valid_values):.3f} {unit}")
        print(f"      Antal pixlar med data: {len(valid_values)}")
    
    # Skapa figur och plot
    cmap, vmin, vmax = create_colormap(parameter)
    print(f"   üé® {param_name.title()} colormap range: {vmin:.2f} - {vmax:.2f} {unit}")
    
    # Anv√§nd mindre figur och l√§gre DPI f√∂r att undvika memory-problem
    fig, ax = plt.subplots(figsize=(8, 8), dpi=100)
    ax.set_xlim(lon_min, lon_max)
    ax.set_ylim(lat_min, lat_max)
    ax.axis('off')  # Ingen axlar f√∂r ren bildexport
    
    # Plotta interpolerad data
    im = ax.imshow(
        grid_values,
        extent=[lon_min, lon_max, lat_min, lat_max],
        origin='lower',
        cmap=cmap,
        vmin=vmin,
        vmax=vmax,
        alpha=0.8,  # L√§tt transparens f√∂r overlay
        interpolation='nearest'  # Anv√§nd nearest f√∂r mindre memory usage
    )
    
    # Spara som PNG med transparent bakgrund
    plt.subplots_adjust(left=0, right=1, top=1, bottom=0)
    plt.savefig(
        output_path,
        format='png',
        dpi=100,
        bbox_inches='tight',  # √Öterst√§ll tight cropping
        pad_inches=0,
        transparent=True,
        facecolor='none'
    )
    plt.close()
    
    print(f"‚úÖ Sparade {output_path}")
    return True

def get_bbox_from_water_mask(water_polygons):
    """Ber√§kna bounding box fr√•n vattenmasken"""
    all_bounds = []
    for polygon in water_polygons:
        all_bounds.extend(polygon.bounds)
    
    if not all_bounds:
        # Fallback f√∂r Skandinaviska vatten
        return (7.5, 13.5, 54.5, 58.0)  # lon_min, lon_max, lat_min, lat_max
    
    lons = all_bounds[::4] + all_bounds[2::4]  # min_x och max_x
    lats = all_bounds[1::4] + all_bounds[3::4]  # min_y och max_y
    
    return (min(lons), max(lons), min(lats), max(lats))

def create_water_point_cache(area_data, water_polygons):
    """Skapa cache f√∂r vilka punkter som √§r i vatten - g√∂r bara en g√•ng"""
    print("üîÑ Skapar cache f√∂r vattenpunkter...")
    cache = {}
    total_points = len(area_data['points'])
    
    for i, point in enumerate(area_data['points']):
        if i % 1000 == 0:
            print(f"   Processar punkt {i}/{total_points}")
        
        lat, lon = point['lat'], point['lon']
        point_key = f"{lat:.4f},{lon:.4f}"
        
        if point_in_water(lon, lat, water_polygons):
            cache[point_key] = True
    
    print(f"‚úÖ Cache skapad: {len(cache)} vattenpunkter av {total_points} totalt")
    return cache

def create_water_mask_grid(water_polygons, bbox, grid_resolution):
    """Skapa en f√∂rcachad vattenmask-grid f√∂r snabb bildgeneration"""
    print(f"üåä Skapar h√∂gruppl√§st vattenmask-grid ({grid_resolution}x{grid_resolution})...")
    
    lon_min, lon_max, lat_min, lat_max = bbox
    lon_grid = np.linspace(lon_min, lon_max, grid_resolution)
    lat_grid = np.linspace(lat_min, lat_max, grid_resolution)
    lon_mesh, lat_mesh = np.meshgrid(lon_grid, lat_grid)
    
    water_mask = np.zeros((grid_resolution, grid_resolution), dtype=bool)
    total_pixels = grid_resolution * grid_resolution
    
    for i in range(grid_resolution):
        if i % 100 == 0:
            print(f"   Rad {i}/{grid_resolution} ({100*i/grid_resolution:.1f}%)")
        
        for j in range(grid_resolution):
            lon_point = lon_mesh[i, j]
            lat_point = lat_mesh[i, j]
            
            if point_in_water(lon_point, lat_point, water_polygons):
                water_mask[i, j] = True
    
    water_pixels = np.sum(water_mask)
    print(f"‚úÖ Vattenmask-grid skapad: {water_pixels}/{total_pixels} pixlar √§r vatten ({100*water_pixels/total_pixels:.1f}%)")
    return water_mask

def clear_directory(directory_path):
    """T√∂m en mapp p√• alla PNG-filer"""
    if not os.path.exists(directory_path):
        os.makedirs(directory_path, exist_ok=True)
        return
        
    # Ta bort alla PNG-filer i mappen
    png_files = list(Path(directory_path).glob("*.png"))
    if png_files:
        print(f"   üóëÔ∏è T√∂mmer mapp: {len(png_files)} gamla bilder...")
        for file in png_files:
            try:
                file.unlink()
            except Exception as e:
                print(f"   ‚ö†Ô∏è Kunde inte radera {file.name}: {e}")
    else:
        print(f"   ‚ú® Mapp redan tom")

def generate_images_for_parameter(parameter, area_data, water_point_cache, water_mask_grid, bbox, output_base_dir, resolution, max_images, force):
    """Generera bilder f√∂r en specifik parameter"""
    config = get_parameter_config(parameter)
    param_name = config['name']
    output_dir_name = config['output_dir']
    
    # Skapa parameter-specifik output-directory
    output_dir = Path(output_base_dir) / output_dir_name
    output_dir.mkdir(parents=True, exist_ok=True)
    
    # T√∂m mappen p√• gamla bilder (alltid n√§r force √§r aktiverat eller f√∂rsta g√•ngen)
    print(f"\nüöÄ Genererar {param_name}-bilder i {output_dir}")
    clear_directory(output_dir)
    
    # H√§mta tidsst√§mplar
    timestamps = area_data['metadata']['timestamps']
    if max_images:
        timestamps = timestamps[:max_images]
        print(f"üî¨ Begr√§nsar till {max_images} bilder f√∂r testning")
    
    successful_count = 0
    
    for i, timestamp in enumerate(timestamps):
        print(f"\nüì∏ {param_name.title()} {i+1}/{len(timestamps)}: {timestamp}")
        
        # Extrahera tidsst√§mpel-prefix (f√∂rsta 13 tecken: YYYY-MM-DDTHH)
        timestamp_prefix = timestamp[:13]
        
        # Skapa s√§kert filnamn med parameter-prefix
        safe_timestamp = timestamp.replace(':', '-').replace('+', 'plus')
        output_path = output_dir / f"{config['name_en']}_{safe_timestamp}.png"
        
        # Hoppa √∂ver om filen redan existerar (s√•vida inte --force anv√§nds)
        if output_path.exists() and not force:
            print(f"‚è≠Ô∏è Hoppar √∂ver befintlig fil")
            successful_count += 1
            continue
        elif output_path.exists() and force:
            print(f"üîÑ Skriver √∂ver befintlig fil")
        
        # Extrahera parameterdata f√∂r denna tidsst√§mpel
        lons, lats, values = extract_parameter_data_for_timestamp(
            area_data, timestamp_prefix, water_point_cache, parameter
        )
        
        if len(lons) > 0:
            # Skapa interpolerad bild
            success = create_interpolated_image(
                lons, lats, values, water_mask_grid, 
                output_path, timestamp, bbox, parameter
            )
            if success:
                successful_count += 1
        else:
            print(f"‚ö†Ô∏è Ingen {param_name}-data f√∂r {timestamp}")
    
    print(f"\nüéâ {param_name.title()}: Genererade {successful_count}/{len(timestamps)} bilder")
    
    # Skapa metadata-fil f√∂r denna parameter
    metadata = {
        "parameter": parameter,
        "parameter_name": param_name,
        "unit": config['unit'],
        "bbox": bbox,
        "total_images": successful_count,
        "timestamps": area_data['metadata']['timestamps'],
        "colormap": config['colormap'],
        "resolution": resolution,
        "generated_at": datetime.now().isoformat()
    }
    
    metadata_path = output_dir / "metadata.json"
    with open(metadata_path, 'w') as f:
        json.dump(metadata, f, indent=2)
    
    print(f"üìã {param_name.title()} metadata sparad i: {metadata_path}")
    return successful_count, len(timestamps)

def main():
    parser = argparse.ArgumentParser(description='Generera bilder f√∂r marina parametrar')
    parser.add_argument('--parameter', choices=['current', 'temperature', 'salinity', 'all'], 
                       default='all', help='Parameter att generera bilder f√∂r (default: all)')
    parser.add_argument('--input', default='public/data/area-parameters-extended.json.gz', 
                       help='S√∂kv√§g till komprimerad area-parameters fil')
    parser.add_argument('--water-mask', default='public/data/scandinavian-waters.geojson',
                       help='S√∂kv√§g till vattenmask GeoJSON')
    parser.add_argument('--output-base-dir', default='public/data',
                       help='Bas-directory f√∂r output (parameter-specifika mappar skapas automatiskt)')
    parser.add_argument('--max-images', type=int, default=None,
                       help='Maximal antal bilder att generera per parameter (f√∂r testning)')
    parser.add_argument('--resolution', type=int, default=1200,
                       help='Grid-uppl√∂sning f√∂r interpolation (default: 1200x1200)')
    parser.add_argument('--force', action='store_true',
                       help='Skriv √∂ver befintliga bilder (standard: hoppa √∂ver befintliga)')
    
    args = parser.parse_args()
    
    print("üåä MARINA PARAMETER BILDGENERATOR")
    print("=" * 50)
    
    # Best√§m vilka parametrar som ska bearbetas
    if args.parameter == 'all':
        parameters = ['current', 'temperature', 'salinity']
        print("üéØ Genererar bilder f√∂r ALLA parametrar")
    else:
        parameters = [args.parameter]
        config = get_parameter_config(args.parameter)
        print(f"üéØ Genererar bilder f√∂r {config['name']}")
    
    print(f"üì¶ Input: {args.input}")
    print(f"üìÅ Output bas-directory: {args.output_base_dir}")
    print(f"üîß Uppl√∂sning: {args.resolution}x{args.resolution}")
    if args.max_images:
        print(f"üî¨ Testl√§ge: Max {args.max_images} bilder per parameter")
    
    # Ladda data EN G√ÖNG (delas mellan alla parametrar)
    print("\nüì¶ Laddar och f√∂rbearbetar data...")
    water_polygons = load_water_mask(args.water_mask)
    area_data = load_area_parameters(args.input)
    
    # Anv√§nd EXAKT samma bbox som frontend Map.tsx maxBounds f√∂r perfect alignment
    bbox = (10.3, 16.6, 54.9, 59.6)  # (lon_min, lon_max, lat_min, lat_max)
    print(f"üó∫Ô∏è Bounding box (h√•rdkodad f√∂r frontend alignment): {bbox}")
    
    # OPTIMERING: Skapa cachade strukturer EN G√ÖNG
    print("‚ö° F√∂rbearbetar f√∂r maximal prestanda...")
    water_point_cache = create_water_point_cache(area_data, water_polygons)
    water_mask_grid = create_water_mask_grid(water_polygons, bbox, args.resolution)
    
    # Frig√∂r minne fr√•n vattenpolygoner (beh√∂vs inte l√§ngre)
    del water_polygons
    
    # Generera bilder f√∂r varje parameter
    total_successful = 0
    total_images = 0
    
    for parameter in parameters:
        successful, total = generate_images_for_parameter(
            parameter, area_data, water_point_cache, water_mask_grid, bbox,
            args.output_base_dir, args.resolution, args.max_images, args.force
        )
        total_successful += successful
        total_images += total
    
    print("\n" + "=" * 50)
    print("üéâ ALLA PARAMETRAR KLARA!")
    print(f"üìä Totalt: {total_successful}/{total_images} bilder genererade")
    print(f"üìÅ Bilder sparade i: {Path(args.output_base_dir).absolute()}")
    
    for parameter in parameters:
        config = get_parameter_config(parameter)
        param_dir = Path(args.output_base_dir) / config['output_dir']
        print(f"   ‚Ä¢ {config['name'].title()}: {param_dir}")

if __name__ == "__main__":
    main() 